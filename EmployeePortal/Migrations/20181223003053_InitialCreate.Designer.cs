// <auto-generated />
using System;
using EmployeePortal;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EmployeePortal.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20181223003053_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EmployeePortal.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("address1");

                    b.Property<string>("address2");

                    b.Property<string>("city");

                    b.Property<string>("country");

                    b.Property<string>("postalCode");

                    b.Property<string>("province");

                    b.HasKey("AddressId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("EmployeePortal.Models.Appointment", b =>
                {
                    b.Property<int>("appointmentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("allDay");

                    b.Property<string>("backgroundColor");

                    b.Property<string>("borderColor");

                    b.Property<DateTime?>("cancellationDate");

                    b.Property<string>("cancellationReason");

                    b.Property<bool?>("cancelled");

                    b.Property<string>("className");

                    b.Property<string>("constraint");

                    b.Property<bool?>("durationEditable");

                    b.Property<bool?>("editable");

                    b.Property<bool?>("editing");

                    b.Property<DateTime?>("end");

                    b.Property<bool?>("isCancellationAlert");

                    b.Property<bool?>("overlap");

                    b.Property<string>("rendering");

                    b.Property<bool?>("resourceEditable");

                    b.Property<string>("resourceId");

                    b.Property<int?>("serviceId");

                    b.Property<string>("source");

                    b.Property<DateTime>("start");

                    b.Property<bool?>("startEditable");

                    b.Property<string>("textColor");

                    b.Property<string>("title");

                    b.Property<string>("url");

                    b.Property<int>("visitId");

                    b.Property<string>("visitIdString");

                    b.HasKey("appointmentId");

                    b.HasIndex("serviceId");

                    b.HasIndex("visitId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("EmployeePortal.Models.AppointmentViewModel", b =>
                {
                    b.Property<int>("AppointmentViewModelId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("end");

                    b.Property<bool>("isSelection");

                    b.Property<string>("resourceId");

                    b.Property<string>("start");

                    b.HasKey("AppointmentViewModelId");

                    b.ToTable("AppointmentViewModels");
                });

            modelBuilder.Entity("EmployeePortal.Models.Clinic", b =>
                {
                    b.Property<int>("clinicId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserId");

                    b.Property<int?>("addressId");

                    b.Property<int?>("companyId");

                    b.Property<string>("name");

                    b.HasKey("clinicId");

                    b.HasIndex("UserId");

                    b.HasIndex("addressId");

                    b.HasIndex("companyId");

                    b.ToTable("Clinics");
                });

            modelBuilder.Entity("EmployeePortal.Models.ClinicProduct", b =>
                {
                    b.Property<int>("ClinicProductId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("clinicId");

                    b.Property<int>("productId");

                    b.Property<int>("quantityInStock");

                    b.Property<float>("retailPrice");

                    b.Property<float>("wholesalePrice");

                    b.HasKey("ClinicProductId");

                    b.ToTable("ClinicProduct");
                });

            modelBuilder.Entity("EmployeePortal.Models.ClinicRoom", b =>
                {
                    b.Property<int>("ClinicId");

                    b.Property<int>("RoomId");

                    b.HasKey("ClinicId", "RoomId");

                    b.HasIndex("RoomId");

                    b.ToTable("ClinicRoom");
                });

            modelBuilder.Entity("EmployeePortal.Models.ClinicTax", b =>
                {
                    b.Property<int>("ClinicId");

                    b.Property<int>("TaxId");

                    b.HasKey("ClinicId", "TaxId");

                    b.HasIndex("TaxId");

                    b.ToTable("ClinicTax");
                });

            modelBuilder.Entity("EmployeePortal.Models.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("accentBrandingColour");

                    b.Property<int?>("addressId");

                    b.Property<string>("contactName");

                    b.Property<string>("contactPhone");

                    b.Property<int?>("hoursOfOperationId");

                    b.Property<int>("minimumDuration");

                    b.Property<string>("name");

                    b.Property<string>("primaryBrandingColour");

                    b.Property<string>("timezone");

                    b.HasKey("CompanyId");

                    b.HasIndex("addressId");

                    b.HasIndex("hoursOfOperationId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("EmployeePortal.Models.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("addressId");

                    b.Property<string>("email");

                    b.Property<string>("faxNumber");

                    b.Property<string>("firstName");

                    b.Property<int?>("hoursOfOperationId");

                    b.Property<string>("lastName");

                    b.Property<string>("phoneNumber");

                    b.Property<string>("proTitle");

                    b.Property<string>("specialty");

                    b.Property<string>("website");

                    b.HasKey("DoctorId");

                    b.HasIndex("addressId");

                    b.HasIndex("hoursOfOperationId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("EmployeePortal.Models.Equipment", b =>
                {
                    b.Property<int>("EquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ServiceId");

                    b.Property<string>("name");

                    b.HasKey("EquipmentId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("EmployeePortal.Models.HoursOfOperation", b =>
                {
                    b.Property<int>("hoursOfOperationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("hoursOfOperationId");

                    b.ToTable("HoursOfOperation");
                });

            modelBuilder.Entity("EmployeePortal.Models.HoursOfOperationDay", b =>
                {
                    b.Property<int>("hoursOfOperationDayId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("closeTime");

                    b.Property<bool>("closed");

                    b.Property<string>("dayofweek");

                    b.Property<int?>("hoursOfOperationId");

                    b.Property<DateTime?>("openTime");

                    b.HasKey("hoursOfOperationDayId");

                    b.HasIndex("hoursOfOperationId");

                    b.ToTable("HoursOfOperationDays");
                });

            modelBuilder.Entity("EmployeePortal.Models.Lab", b =>
                {
                    b.Property<int>("LabId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("addressId");

                    b.Property<string>("email");

                    b.Property<string>("faxNumber");

                    b.Property<int?>("hoursOfOperationId");

                    b.Property<string>("labType");

                    b.Property<string>("name");

                    b.Property<string>("phoneNumber1");

                    b.Property<string>("phoneNumber2");

                    b.Property<string>("phoneNumber3");

                    b.Property<string>("website");

                    b.HasKey("LabId");

                    b.HasIndex("addressId");

                    b.HasIndex("hoursOfOperationId");

                    b.ToTable("Labs");
                });

            modelBuilder.Entity("EmployeePortal.Models.Package", b =>
                {
                    b.Property<int>("PackageId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("name");

                    b.Property<string>("packageProductsString");

                    b.Property<float>("retailPrice");

                    b.Property<string>("totalOfIndividualPrices");

                    b.HasKey("PackageId");

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("EmployeePortal.Models.PackageProduct", b =>
                {
                    b.Property<int>("ProductId");

                    b.Property<int>("PackageId");

                    b.Property<int>("ProductQuantity");

                    b.HasKey("ProductId", "PackageId");

                    b.HasIndex("PackageId");

                    b.ToTable("PackageProduct");
                });

            modelBuilder.Entity("EmployeePortal.Models.PackageService", b =>
                {
                    b.Property<int>("ServiceId");

                    b.Property<int>("PackageId");

                    b.Property<int>("ServiceQuantity");

                    b.HasKey("ServiceId", "PackageId");

                    b.HasIndex("PackageId");

                    b.ToTable("PackageService");
                });

            modelBuilder.Entity("EmployeePortal.Models.PackageTax", b =>
                {
                    b.Property<int>("PackageId");

                    b.Property<int>("TaxId");

                    b.HasKey("PackageId", "TaxId");

                    b.HasIndex("TaxId");

                    b.ToTable("PackageTax");
                });

            modelBuilder.Entity("EmployeePortal.Models.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("addressId");

                    b.Property<string>("birthDate");

                    b.Property<long>("clientId");

                    b.Property<string>("communicationPreference");

                    b.Property<int?>("doctorId");

                    b.Property<string>("email");

                    b.Property<string>("firstName");

                    b.Property<string>("gender");

                    b.Property<string>("homeNumber");

                    b.Property<bool>("isPreferred");

                    b.Property<string>("lastName");

                    b.Property<string>("mobileNumber");

                    b.Property<string>("nickName");

                    b.Property<string>("notesAndAlerts");

                    b.Property<int?>("pharmacyId");

                    b.Property<bool>("sendAppointmentNotifications");

                    b.Property<bool>("sendRetentionEmails");

                    b.HasKey("PatientId");

                    b.HasIndex("addressId");

                    b.HasIndex("doctorId");

                    b.HasIndex("pharmacyId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("EmployeePortal.Models.PatientSocialHistoryEntry", b =>
                {
                    b.Property<int>("patientSocialHistoryEntryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("PatientId");

                    b.Property<int?>("PatientViewModelId");

                    b.Property<string>("enteredBy");

                    b.Property<DateTime>("entryDate");

                    b.Property<string>("entryText");

                    b.HasKey("patientSocialHistoryEntryId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PatientViewModelId");

                    b.ToTable("PatientSocialHistoryEntry");
                });

            modelBuilder.Entity("EmployeePortal.Models.PatientViewModel", b =>
                {
                    b.Property<int>("PatientViewModelId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("addressId");

                    b.Property<string>("birthDate");

                    b.Property<int>("clientId");

                    b.Property<string>("communicationPreference");

                    b.Property<int?>("doctorId");

                    b.Property<string>("email");

                    b.Property<string>("firstName");

                    b.Property<string>("gender");

                    b.Property<string>("homeNumber");

                    b.Property<bool>("isPreferred");

                    b.Property<string>("lastName");

                    b.Property<string>("mobileNumber");

                    b.Property<string>("nickName");

                    b.Property<string>("notesAndAlerts");

                    b.Property<long>("patientId");

                    b.Property<int?>("pharmacyId");

                    b.Property<bool>("sendAppointmentNotifications");

                    b.Property<bool>("sendRetentionEmails");

                    b.HasKey("PatientViewModelId");

                    b.HasIndex("addressId");

                    b.HasIndex("doctorId");

                    b.HasIndex("pharmacyId");

                    b.ToTable("PatientViewModels");
                });

            modelBuilder.Entity("EmployeePortal.Models.Pharmacy", b =>
                {
                    b.Property<int>("PharmacyId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("addressId");

                    b.Property<string>("email");

                    b.Property<string>("faxNumber");

                    b.Property<int?>("hoursOfOperationId");

                    b.Property<string>("name");

                    b.Property<string>("phoneNumber1");

                    b.Property<string>("phoneNumber2");

                    b.Property<string>("phoneNumber3");

                    b.Property<string>("website");

                    b.HasKey("PharmacyId");

                    b.HasIndex("addressId");

                    b.HasIndex("hoursOfOperationId");

                    b.ToTable("Pharmacies");
                });

            modelBuilder.Entity("EmployeePortal.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("name");

                    b.Property<int>("productCategoryId");

                    b.Property<string>("productCode");

                    b.Property<int>("quantity");

                    b.Property<int>("quantityInStock");

                    b.Property<float>("retailPrice");

                    b.Property<int>("usageDuration");

                    b.Property<float>("wholesalePrice");

                    b.HasKey("ProductId");

                    b.HasIndex("productCategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("EmployeePortal.Models.ProductCategory", b =>
                {
                    b.Property<int>("ProductCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("name");

                    b.HasKey("ProductCategoryId");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("EmployeePortal.Models.ProductTax", b =>
                {
                    b.Property<int>("ProductId");

                    b.Property<int>("TaxId");

                    b.HasKey("ProductId", "TaxId");

                    b.HasIndex("TaxId");

                    b.ToTable("ProductTax");
                });

            modelBuilder.Entity("EmployeePortal.Models.RecommendedProduct", b =>
                {
                    b.Property<int>("ProductId");

                    b.Property<int>("ServiceId");

                    b.Property<int>("ProductQuantity");

                    b.HasKey("ProductId", "ServiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("RecommendedProduct");
                });

            modelBuilder.Entity("EmployeePortal.Models.RequiredProduct", b =>
                {
                    b.Property<int>("ProductId");

                    b.Property<int>("ServiceId");

                    b.Property<int>("ProductQuantity");

                    b.HasKey("ProductId", "ServiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("RequiredProduct");
                });

            modelBuilder.Entity("EmployeePortal.Models.Resource", b =>
                {
                    b.Property<int>("ResourceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("name");

                    b.Property<string>("resourceType");

                    b.HasKey("ResourceId");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("EmployeePortal.Models.Room", b =>
                {
                    b.Property<int>("roomId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ServiceId");

                    b.Property<string>("roomName");

                    b.HasKey("roomId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("EmployeePortal.Models.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("SpecialId");

                    b.Property<int>("billingCode");

                    b.Property<int>("defaultDurationMinutes");

                    b.Property<float>("defaultPrice");

                    b.Property<int>("diagnosticCode");

                    b.Property<bool>("governmentBilling");

                    b.Property<int>("quantity");

                    b.Property<string>("serviceAltName");

                    b.Property<int>("serviceCategoryId");

                    b.Property<string>("serviceIDColour");

                    b.Property<string>("serviceName");

                    b.Property<string>("serviceRecProductsString");

                    b.Property<string>("serviceReqProductsString");

                    b.Property<bool>("status");

                    b.Property<string>("subType");

                    b.Property<string>("templateIcon");

                    b.HasKey("ServiceId");

                    b.HasIndex("SpecialId");

                    b.HasIndex("serviceCategoryId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("EmployeePortal.Models.ServiceCategory", b =>
                {
                    b.Property<int>("ServiceCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("name");

                    b.HasKey("ServiceCategoryId");

                    b.ToTable("ServiceCategories");
                });

            modelBuilder.Entity("EmployeePortal.Models.ServiceTax", b =>
                {
                    b.Property<int>("ServiceId");

                    b.Property<int>("TaxId");

                    b.HasKey("ServiceId", "TaxId");

                    b.HasIndex("TaxId");

                    b.ToTable("ServiceTax");
                });

            modelBuilder.Entity("EmployeePortal.Models.Special", b =>
                {
                    b.Property<int>("SpecialId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("code");

                    b.Property<string>("name");

                    b.Property<float>("retailPrice");

                    b.Property<string>("totalOfIndividualPrices");

                    b.HasKey("SpecialId");

                    b.ToTable("Specials");
                });

            modelBuilder.Entity("EmployeePortal.Models.SpecialProduct", b =>
                {
                    b.Property<int>("ProductId");

                    b.Property<int>("SpecialId");

                    b.Property<int>("ProductQuantity");

                    b.HasKey("ProductId", "SpecialId");

                    b.HasIndex("SpecialId");

                    b.ToTable("SpecialProduct");
                });

            modelBuilder.Entity("EmployeePortal.Models.SpecialTax", b =>
                {
                    b.Property<int>("SpecialId");

                    b.Property<int>("TaxId");

                    b.HasKey("SpecialId", "TaxId");

                    b.HasIndex("TaxId");

                    b.ToTable("SpecialTax");
                });

            modelBuilder.Entity("EmployeePortal.Models.Staff", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("name");

                    b.HasKey("StaffId");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("EmployeePortal.Models.StaffSchedule", b =>
                {
                    b.Property<int>("StaffScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("End");

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("Notes");

                    b.Property<int>("ParentId");

                    b.Property<int>("Recurrence");

                    b.Property<int>("StaffId");

                    b.Property<DateTime>("Start");

                    b.Property<string>("Title");

                    b.HasKey("StaffScheduleId");

                    b.HasIndex("StaffId");

                    b.ToTable("StaffSchedules");
                });

            modelBuilder.Entity("EmployeePortal.Models.StaffService", b =>
                {
                    b.Property<int>("ServiceId");

                    b.Property<int>("StaffId");

                    b.HasKey("ServiceId", "StaffId");

                    b.HasIndex("StaffId");

                    b.ToTable("StaffService");
                });

            modelBuilder.Entity("EmployeePortal.Models.Tax", b =>
                {
                    b.Property<int>("taxId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("name");

                    b.Property<decimal>("value");

                    b.HasKey("taxId");

                    b.ToTable("Taxes");
                });

            modelBuilder.Entity("EmployeePortal.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<int?>("AddressId");

                    b.Property<string>("Avatar");

                    b.Property<bool>("CanSetBreaks");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("ServiceProvider");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<int?>("UserCategoryId");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserCategoryId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("EmployeePortal.Models.UserCategory", b =>
                {
                    b.Property<int>("UserCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("categoryName");

                    b.HasKey("UserCategoryId");

                    b.ToTable("UserCategories");
                });

            modelBuilder.Entity("EmployeePortal.Models.UserCategoryService", b =>
                {
                    b.Property<int>("ServiceId");

                    b.Property<int>("UserCategoryId");

                    b.HasKey("ServiceId", "UserCategoryId");

                    b.HasIndex("UserCategoryId");

                    b.ToTable("UserCategoryService");
                });

            modelBuilder.Entity("EmployeePortal.Models.Visit", b =>
                {
                    b.Property<int>("VisitId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("cancellationDate");

                    b.Property<string>("cancellationReason");

                    b.Property<bool>("cancelled");

                    b.Property<bool>("checkedIn");

                    b.Property<bool>("confirmed");

                    b.Property<string>("createdBy");

                    b.Property<DateTime>("date");

                    b.Property<bool>("isCancellationAlert");

                    b.Property<bool>("noShow");

                    b.Property<int>("patientId");

                    b.Property<string>("patientNotes");

                    b.Property<float>("totalVisitCost");

                    b.Property<string>("visitIdString");

                    b.Property<string>("visitNotes");

                    b.HasKey("VisitId");

                    b.HasIndex("patientId");

                    b.ToTable("Visits");
                });

            modelBuilder.Entity("EmployeePortal.Models.VisitProduct", b =>
                {
                    b.Property<int>("VisitId");

                    b.Property<int>("ProductId");

                    b.Property<int>("Id");

                    b.Property<int>("Quantity");

                    b.HasKey("VisitId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("VisitProducts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("EmployeePortal.Models.Appointment", b =>
                {
                    b.HasOne("EmployeePortal.Models.Service", "service")
                        .WithMany()
                        .HasForeignKey("serviceId");

                    b.HasOne("EmployeePortal.Models.Visit")
                        .WithMany("appointments")
                        .HasForeignKey("visitId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EmployeePortal.Models.Clinic", b =>
                {
                    b.HasOne("EmployeePortal.Models.User")
                        .WithMany("Clinics")
                        .HasForeignKey("UserId");

                    b.HasOne("EmployeePortal.Models.Address", "address")
                        .WithMany()
                        .HasForeignKey("addressId");

                    b.HasOne("EmployeePortal.Models.Company")
                        .WithMany("clinics")
                        .HasForeignKey("companyId");
                });

            modelBuilder.Entity("EmployeePortal.Models.ClinicRoom", b =>
                {
                    b.HasOne("EmployeePortal.Models.Clinic", "Clinic")
                        .WithMany("clinicRooms")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EmployeePortal.Models.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EmployeePortal.Models.ClinicTax", b =>
                {
                    b.HasOne("EmployeePortal.Models.Clinic", "Clinic")
                        .WithMany("clinicTaxes")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EmployeePortal.Models.Tax", "Tax")
                        .WithMany()
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EmployeePortal.Models.Company", b =>
                {
                    b.HasOne("EmployeePortal.Models.Address", "address")
                        .WithMany()
                        .HasForeignKey("addressId");

                    b.HasOne("EmployeePortal.Models.HoursOfOperation", "hoursOfOperation")
                        .WithMany()
                        .HasForeignKey("hoursOfOperationId");
                });

            modelBuilder.Entity("EmployeePortal.Models.Doctor", b =>
                {
                    b.HasOne("EmployeePortal.Models.Address", "address")
                        .WithMany()
                        .HasForeignKey("addressId");

                    b.HasOne("EmployeePortal.Models.HoursOfOperation", "hoursOfOperation")
                        .WithMany()
                        .HasForeignKey("hoursOfOperationId");
                });

            modelBuilder.Entity("EmployeePortal.Models.Equipment", b =>
                {
                    b.HasOne("EmployeePortal.Models.Service")
                        .WithMany("equipment")
                        .HasForeignKey("ServiceId");
                });

            modelBuilder.Entity("EmployeePortal.Models.HoursOfOperationDay", b =>
                {
                    b.HasOne("EmployeePortal.Models.HoursOfOperation")
                        .WithMany("hoursOfOperationDays")
                        .HasForeignKey("hoursOfOperationId");
                });

            modelBuilder.Entity("EmployeePortal.Models.Lab", b =>
                {
                    b.HasOne("EmployeePortal.Models.Address", "address")
                        .WithMany()
                        .HasForeignKey("addressId");

                    b.HasOne("EmployeePortal.Models.HoursOfOperation", "hoursOfOperation")
                        .WithMany()
                        .HasForeignKey("hoursOfOperationId");
                });

            modelBuilder.Entity("EmployeePortal.Models.PackageProduct", b =>
                {
                    b.HasOne("EmployeePortal.Models.Package", "Package")
                        .WithMany("packageProducts")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EmployeePortal.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EmployeePortal.Models.PackageService", b =>
                {
                    b.HasOne("EmployeePortal.Models.Package", "Package")
                        .WithMany("packageServices")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EmployeePortal.Models.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EmployeePortal.Models.PackageTax", b =>
                {
                    b.HasOne("EmployeePortal.Models.Package", "Package")
                        .WithMany("packageTaxes")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EmployeePortal.Models.Tax", "Tax")
                        .WithMany()
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EmployeePortal.Models.Patient", b =>
                {
                    b.HasOne("EmployeePortal.Models.Address", "address")
                        .WithMany()
                        .HasForeignKey("addressId");

                    b.HasOne("EmployeePortal.Models.Doctor", "familyPhysician")
                        .WithMany()
                        .HasForeignKey("doctorId");

                    b.HasOne("EmployeePortal.Models.Pharmacy", "preferredPharmacy")
                        .WithMany()
                        .HasForeignKey("pharmacyId");
                });

            modelBuilder.Entity("EmployeePortal.Models.PatientSocialHistoryEntry", b =>
                {
                    b.HasOne("EmployeePortal.Models.Patient")
                        .WithMany("socialHistory")
                        .HasForeignKey("PatientId");

                    b.HasOne("EmployeePortal.Models.PatientViewModel")
                        .WithMany("socialHistory")
                        .HasForeignKey("PatientViewModelId");
                });

            modelBuilder.Entity("EmployeePortal.Models.PatientViewModel", b =>
                {
                    b.HasOne("EmployeePortal.Models.Address", "address")
                        .WithMany()
                        .HasForeignKey("addressId");

                    b.HasOne("EmployeePortal.Models.Doctor", "familyPhysician")
                        .WithMany()
                        .HasForeignKey("doctorId");

                    b.HasOne("EmployeePortal.Models.Pharmacy", "preferredPharmacy")
                        .WithMany()
                        .HasForeignKey("pharmacyId");
                });

            modelBuilder.Entity("EmployeePortal.Models.Pharmacy", b =>
                {
                    b.HasOne("EmployeePortal.Models.Address", "address")
                        .WithMany()
                        .HasForeignKey("addressId");

                    b.HasOne("EmployeePortal.Models.HoursOfOperation", "hoursOfOperation")
                        .WithMany()
                        .HasForeignKey("hoursOfOperationId");
                });

            modelBuilder.Entity("EmployeePortal.Models.Product", b =>
                {
                    b.HasOne("EmployeePortal.Models.ProductCategory", "category")
                        .WithMany()
                        .HasForeignKey("productCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EmployeePortal.Models.ProductTax", b =>
                {
                    b.HasOne("EmployeePortal.Models.Product", "Product")
                        .WithMany("productTaxes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EmployeePortal.Models.Tax", "Tax")
                        .WithMany()
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EmployeePortal.Models.RecommendedProduct", b =>
                {
                    b.HasOne("EmployeePortal.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EmployeePortal.Models.Service", "Service")
                        .WithMany("recommendedProducts")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EmployeePortal.Models.RequiredProduct", b =>
                {
                    b.HasOne("EmployeePortal.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EmployeePortal.Models.Service", "Service")
                        .WithMany("requiredProducts")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EmployeePortal.Models.Room", b =>
                {
                    b.HasOne("EmployeePortal.Models.Service")
                        .WithMany("room")
                        .HasForeignKey("ServiceId");
                });

            modelBuilder.Entity("EmployeePortal.Models.Service", b =>
                {
                    b.HasOne("EmployeePortal.Models.Special")
                        .WithMany("services")
                        .HasForeignKey("SpecialId");

                    b.HasOne("EmployeePortal.Models.ServiceCategory", "category")
                        .WithMany()
                        .HasForeignKey("serviceCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EmployeePortal.Models.ServiceTax", b =>
                {
                    b.HasOne("EmployeePortal.Models.Service", "Service")
                        .WithMany("serviceTaxes")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EmployeePortal.Models.Tax", "Tax")
                        .WithMany()
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EmployeePortal.Models.SpecialProduct", b =>
                {
                    b.HasOne("EmployeePortal.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EmployeePortal.Models.Special", "Special")
                        .WithMany("products")
                        .HasForeignKey("SpecialId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EmployeePortal.Models.SpecialTax", b =>
                {
                    b.HasOne("EmployeePortal.Models.Special", "Special")
                        .WithMany("specialTaxes")
                        .HasForeignKey("SpecialId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EmployeePortal.Models.Tax", "Tax")
                        .WithMany()
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EmployeePortal.Models.StaffSchedule", b =>
                {
                    b.HasOne("EmployeePortal.Models.Staff", "Staff")
                        .WithMany("staffSchedules")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EmployeePortal.Models.StaffService", b =>
                {
                    b.HasOne("EmployeePortal.Models.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EmployeePortal.Models.Staff", "Staff")
                        .WithMany("services")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EmployeePortal.Models.User", b =>
                {
                    b.HasOne("EmployeePortal.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("EmployeePortal.Models.UserCategory", "UserCategory")
                        .WithMany()
                        .HasForeignKey("UserCategoryId");
                });

            modelBuilder.Entity("EmployeePortal.Models.UserCategoryService", b =>
                {
                    b.HasOne("EmployeePortal.Models.Service", "Service")
                        .WithMany("userCategories")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EmployeePortal.Models.UserCategory", "UserCategory")
                        .WithMany()
                        .HasForeignKey("UserCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EmployeePortal.Models.Visit", b =>
                {
                    b.HasOne("EmployeePortal.Models.Patient", "patient")
                        .WithMany()
                        .HasForeignKey("patientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EmployeePortal.Models.VisitProduct", b =>
                {
                    b.HasOne("EmployeePortal.Models.Product", "Product")
                        .WithMany("visitProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EmployeePortal.Models.Visit", "Visit")
                        .WithMany("visitProducts")
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EmployeePortal.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EmployeePortal.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EmployeePortal.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EmployeePortal.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
